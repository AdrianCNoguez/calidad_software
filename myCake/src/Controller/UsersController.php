<?php
namespace App\Controller;

use App\Controller\AppController;
use App\Model\Entity\User;
use Cake\Event\Event;
use Cake\ORM\Query;
use Cake\ORM\RulesChecker;
use Cake\ORM\Table;
use Cake\Validation\Validator;
/**
 * Users Controller
 *
 *
 * @method \App\Model\Entity\User[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
//para listar usuarios rutas por defecta de php

class UsersController extends AppController
{
    public function beforeFilter(\Cake\Event\Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->Auth->allow(['add']);
    }

    public function isAuthorized($user)
    {
        if (isset($user['role']) and $user['role'] == 'user') {
            if(in_array($this->request->action,['index', 'logout'])){
                return true;
            }
        }
            return parent::isAuthorized($user); // TODO: Change the autogenerated stub
    }


    public function login()
    {
        if($this->request->is('post'))
        {
            $user = $this->Auth->identify();
            if($user)
            {
                $this->Auth->setUser($user);
                return $this->redirect($this->Auth->redirectUrl());
            }
            else
            {
                $this->Flash->error('Datos son invalidos, por favor intente nuevamente', ['key' => 'auth']);
            }
        }

        if ($this->Auth->user())
        {
           return $this->redirect(['controller' => 'Users', 'action' => 'index']);
        }
    }

    public function  logout(){
        return $this->redirect($this->Auth->logout());
    }
//------------------------------------------------------------------------------------------------------------

    //-----------------------------------------------------------------------------------------//



/*

    public function home()
    {
        $this->redirect();
    }
*/

    public function index()
    {
        $this->render();
        $users = $this->paginate($this->Users);
        $this->set('users', $users);

    }



    public function pdf($id = null)
    {

        $num = $id;
        $int = (int)$num;
        echo $int;

        $user = $this->Users->get($int, [
            'contain' => []
        ]);
        $this->viewBuilder()->options([
            'pdfConfig' => [
                'orientation' => 'portrait',
                'filename' => 'User_' . $id . '.pdf'
            ]
        ]);
        $this->set('user', $user);
    }

    public function view($id)
    {
        $user = $this->Users->get($id, [
            'contain' => [],
        ]);

        $this->set('user', $user);
    }


    public function add(){
    $user = $this->Users->newEntity();
    if($this->request->is('post')){
        //debug($this->request->data());
        $user = $this->Users->patchEntity($user, $this->request->getData());
        $user->role = 'user';
        $user->active=0;
     if($this->Users->save($user)){
         $this->Flash->success('El usuario se guardo bien');
         return $this->redirect(['controller'=>'Users','action'=>'login']);
     }else{
         $this->Flash->error("El usuario no se puedo crear, intentalo de nuez");
     }
    }
        /*
        $this->viewBuilder()->options([
            'pdfConfig' => [
                'orientation' => 'portrait',
                'filename' => 'User_' . $id . '.pdf'
            ]
        ]);*/

    $this->set('user');

    }



    public function edit($id = null){
        $user = $this->Users->get($id);

        if($this->request->is(['patch','post','put'])){
            $user=$this->Users->patchEntity($user, $this->request->getData());
            if($this->Users->save($user)){
                $this->Flash->success('El usario ha sido modificado');
                    return $this->redirect(['action'=>'index']);
            }else{
                $this->Flash->error('Error wuacho, el usuario no se edito, intentalo otra vez');
            }
        }

        $this->set(compact('user'));

    }

    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $user = $this->Users->get($id);
        if ($this->Users->delete($user)) {
            $this->Flash->success(__('El usuario se ha eliminado'));
        } else {
            $this->Flash->error(__('El weon no se ha podido eliminar. Intentalo de new.'));
        }

        return $this->redirect(['action' => 'index']);
    }


}
